generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Product {
  id          Int       @id @default(autoincrement())
  title       String
  price       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cartItems   CartItem[]
  imageUrl    String
  // category    Category  @relation(fields: [categoryId], references: [id])
  // categoryId  Int
}

model Cart {
  id     Int         @id @default(autoincrement())
  userId String
  user   User        @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cartId    Int
  cart      Cart      @relation(fields: [cartId], references: [id])
  productId Int
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int       @default(1)
  createdAt DateTime  @default(now())
}

// model Category {
//   id          Int        @id @default(autoincrement())
//   name        String     @unique
//   products    Product[]
// }

// ==========================================================================================================
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  carts  Cart[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}